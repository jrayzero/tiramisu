- Dynamic buffer size: to specify a buffer size that is not a literal constant.
    - An example is provided is test_87

- f0.compute_root() in Halide should be translated to
	- Let's assume that f1 is the consumer of f0.
	- f0.before(f1, computation::root);

- Tuples: translate an assignment of a Tuple to a function
	as the diffinition of multiple computations.
	For example, if you have

	f(i) = Tuple(5,17)

	It should be translated in Tiramisu to two computations

	{f0[i]: 0<=i<N}: 5
	{f1[i]: 0<=i<N}: 17

	Now any reference to f(i).0 (i.e., the first element in
	the tuple f(i)), should be translated into f0(i) or
	something similar.

- Bound inference
	- An example of how to do bound inference in case of non-affine bounds
	is provided in test_24. Basically, the non-affine bounds should be "hidden"
	in constants (in test_24, we create T1 and T2 to hide the non-affine
	bounds).

- Reductions and Updates
    - Rules
        - Reductions and updates have exactly the same set of rules.
	- Declaring an update:
	    - Each update has a new name. 
	    - The number of dimensions of the iteration domain of the update = the number of loops around the update.
	    - Declaring the buffer associated to the update: the number of dimensions of the buffer = the number of dimensions of the Halide function.
	- Examples:
	    - Reduction : test_26 and test_54.cpp.
	    - False update: test_25.
	    - Tutorials: tutorial_06.cpp, tutorial_08.cpp
	    - Example of matrix multiplication: test_85.cpp
    - Examples:
	-- Example 1:
	        res[0] = 0;
	        res[0] = res[0] + 3;
                res[0] = res[0] + 2;
                for (int k=1; k<N; k++)
                    res[0] = res[0] + 1;
            It should be translated to
		// Layer I:
		res[0] = 0;
                res_1[0] = res_1[0] + 1;
                res_2[0] = res_2[0] + 1;
                for (int k=1; k<N; k++)
                    res_3[0] = res_3[0] + 1;

		// Layer III:
		{  res[i]->buff_res[i]}
		{res_1[i]->buff_res_1[i]};
		{res_2[i]->buff_res_2[i]};
                {res_3[i]->buff_res_3[i]};

	-- Example2:
		 for (ry=0; ry<7; ry++)
		      for (rx=0; rx<7; rx++)
			      S0[ry,rx] = 5;
		
		 // Reduction with predicate
		 for (ry=0; ry<7; ry++)
		      for (rx=0; rx<7; rx++)
			      if ((r.x - 3)*(r.x - 3) + (r.y - 3)*(r.y - 3) <= 10)
				  S0[ry,rx] = S0[ry,rx] * 2;

	    It should be translated to
		 // Layer I
	         {S0  [ry, rx]: 0<=ry<7 and 0<=rx<7}: 5
	 	 {S0_1[ry, rx]: 0<=ry<7 and 0<=rx<7 and ((r.x - 3)*(r.x - 3) + (r.y - 3)*(r.y - 3) <= 10)}: S0_1[ry, rx] * 2

		 // Layer III
		 {S0  [ry, rx]->buff_S0  [ry, rx]}
		 {S0_1[ry, rx]->buff_S0_1[ry, rx]}

	-- Example 3
		 result = 0
		 for (int i = 0; i < N; i++)
		      result = result + input[i];

      	     It should be translated to
		 // Layer I
		 {result  [0]}	      : 0
		 {result_1[i]: 0<=i<N}: result_1[i] + input[i];

		 // Layer III
		 {result  [i]->buff_result  [i]}
		 {result_1[i]->buff_result_1[i]}

	 -- Example 4
		for i = 0, N
		    for j = 0, N
			for k = 0, N
			    f(i, j) = 0
			g(i, j) = 0
		for i = 0, N
		    for j = 0, N
			for k0 = 0, 5
			    for k1 = 0, 5
				f(i, k1) += 1;
			    g(k0, j) += f(0, i);
		f(0, 0) += f(1, 1);

	    It should be translated into
		// Layer I
		{f[i, j, k]: 0<=i<N and 0<=j<N and 0<=k<N}: 0
		{g[i, j]: 0<=i<N and 0<=j<N}: 0
		{f_1[i, j, k0, k1]: 0<=i<N and 0<=j<N and 0<=k0<5 and 0<=k1<5}: f_1(i, 0, 0, k1) + 1
		{g_1[i, j, k0]: 0<=i<N and 0<=j<N and 0<=k0<N}: g_1(k0, j) + f(i, j, k0, k1)
		{f_2[0]}: f_1(0, 0, 1, 1) + 1

		// Layer III
		{f[i, j, k]->buff_f_0[i, j]}
		{g[i, j]->buff_g_0[i, j]}
		{f_1[i, j, k0, k1]->buff_f_1[i, k1]}
		{g_1[i, j, k0]->buff_g_1[k0, j]}
		{f_2[0]->buff_f_2[0, 0]}


